# -*- coding: utf-8 -*-
"""Untitled7 (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ivyT_FPkb3AGeNOzldeM0VfCSBl1eW3
"""

import streamlit as st
import requests
from streamlit_lottie import st_lottie
import joblib
import numpy as np

st.set_page_config(page_title='rocket landing', page_icon='::star::')

def load_lottie(url): # test url if you want to use your own lottie file 'valid url' or 'invalid url'
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

def prepare_input_data_for_model(BoosterVersion, PayloadMass, Orbit, LaunchSite, GridFins,
       Reused, Legs, LandingPad, Block, ReusedCount):




    if LandingPad == '5e9e3032383ecb761634e7cb':
        LandingPad = 3
    elif LandingPad == '5e9e3032383ecb6bb234e7ca':
        LandingPad = 2
    elif LandingPad == '5e9e3032383ecb267a34e7c7':
        LandingPad = 0
    elif LandingPad == '5e9e3033383ecbb9e534e7cc':
        LandingPad = 4
    else :
        LandingPad = 1




    if GridFins == 'False':
        GridFins = 0
    else:
         GridFins = 1


    if Reused == 'False':
        Reused = 0
    else:
         Reused = 1
         

    if Legs == 'False':
        Legs = 0
    else:
         Legs = 1     

    if BoosterVersion == 'Falcon 9':
        Legs = 1



    if Orbit == 'LEO':
        Orbit = 5
    elif Orbit == 'ISS':
        Orbit = 4
    elif Orbit == 'PO':
        Orbit = 7
    elif Orbit == 'GTO':
        Orbit = 2
    elif Orbit == 'ES-L1':
        Orbit = 0
    elif Orbit == 'SSO':
        Orbit = 9
    elif Orbit == 'HEO':
        Orbit = 3
    elif Orbit == 'MEO':
        Orbit = 6
    elif Orbit == 'VLEO':
        Orbit = 10
    elif Orbit == 'SO':
        Orbit = 8
    else:
        Orbit = 1                              



    if LaunchSite == 'CCSFS SLC 40':
        LaunchSite = 0
    elif LaunchSite == 'VAFB SLC 4E':
        LaunchSite = 2
    else:
        LaunchSite = 1

    

    A = [BoosterVersion, PayloadMass, Orbit, LaunchSite, GridFins,
       Reused, Legs, LandingPad, Block, ReusedCount]
    sample = np.array(A).reshape(-1,len(A))

    return sample

import pickle


loaded_model = pickle.load("model.sav")



st.write('# rocket landing ')
st.header('Placement')

#lottie_link = "https://lottie.host/6994bc3f-4f36-4ab6-9f44-4646cea87690/oVQQrhTlNb.json"
#zanimation = load_lottie(lottie_link)

st.write('---')
st.subheader('Enter your details to predict the rocket landing')

with st.container():

    right_column, left_column = st.columns(2)



    with right_column:
        BoosterVersion = st.radio('booster version: ', 'Falcon 9')
        Orbit = st.radio('Orbit: ', ['LEO', 'ISS', 'PO', 'GTO', 'ES-L1', 'SSO', 'HEO', 'MEO', 'VLEO','SO', 'GEO'])
        PayloadMass= st.number_input('Payload Mass:', min_value=0.0, max_value=16600.0, value=0.0, step=0.1)
        LaunchSite = st.radio('LaunchSite: ', ['CCSFS SLC 40', 'VAFB SLC 4E', 'KSC LC 39A'])
        GridFins = st.radio('GridFins: ', ['True','False'])
        Reused = st.radio('Reused: ', ['True','False'])
        Legs = st.radio('Legs: ', ['True','False'])

        LandingPad = st.radio('LandingPad: ', ['5e9e3032383ecb761634e7cb', '5e9e3032383ecb6bb234e7ca',
       '5e9e3032383ecb267a34e7c7', '5e9e3033383ecbb9e534e7cc',
       '5e9e3032383ecb554034e7c9'])


        Block= st.number_input('block:', min_value=0.0, max_value=20.0, value=0.0, step=0.1)
        ReusedCount= st.number_input('reused count:', min_value=0.0, max_value=20.0, value=0.0, step=0.1)

        sample = prepare_input_data_for_model(BoosterVersion, PayloadMass, Orbit, LaunchSite, GridFins,
       Reused, Legs, LandingPad, Block, ReusedCount)




    if st.button('Predict'):
            pred_Y = loaded_model.predict(sample)

            if pred_Y >= 50 :
                #st.write("## Predicted Status : ", result)
                st.write('### the rocket will land')
                st.balloons()
            
            else :
                #st.write("## Predicted Status : ", result)
                st.write('### the rocket will not land ')
                #st.balloons()